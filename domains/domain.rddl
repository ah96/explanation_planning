domain explanation_planning {

    types {
        failure: object;
        response: object;
        robot: object;
        human: object;
        waypoint: object;
        book: object;
    };

    pvariables {
        // non-fluents
        human_at(human, waypoint): { non-fluent, bool, default = false };
        wants_book(human, book): { non-fluent, bool, default = false };
        book_at(book, waypoint): { non-fluent, bool, default = false }; 
        prob_failure(failure): { non-fluent, real, default = 0.5 };
        prob_response(response, failure): { non-fluent, real, default = 0.5 };

        // state fluents (states)
        robot_at(robot, waypoint): { state-fluent, bool, default = false };
        book_fetched(book, robot, human): { state-fluent, bool, default = false };
        failure_triggered(failure): { state-fluent, bool, default = false };
        response_triggered(response): { state-fluent, bool, default = false };
        failure_happened: { state-fluent, bool, default = false };
        response_given: { state-fluent, bool, default = false };
        task_completed: { state-fluent, bool, default = false };

        // action fluents (actions)
        goto_waypoint(robot, waypoint, waypoint): { action-fluent, bool, default = false };
        fetch_book(robot, book, human): { action-fluent, bool, default = false };
        failure_happens(robot, book, failure): { action-fluent, bool, default = false };
        give_response(robot, response, failure, human): { action-fluent, bool, default = false };
    };

    cpfs {
        // propagation of state fluents

        robot_at'(?r, ?w) = if (exists_{?w1: waypoint} (goto_waypoint(?r, ?w1, ?w))) then true 
                    else if (exists_{?w1: waypoint} (goto_waypoint(?r, ?w, ?w1))) then false
                    else robot_at(?r, ?w);

        book_fetched'(?b, ?r, ?h) = if ( fetch_book(?r, ?b, ?h) ) then true 
                    else book_fetched(?b, ?r, ?h);

        failure_happened' = if (exists_{?r: robot, ?b: book, ?f: failure} [ failure_happens(?r, ?b, ?f) ] ) then true 
                    else failure_happened;

        failure_triggered'(?f) = if ( Bernoulli(prob_failure(?f)) ) then true
                                else failure_triggered(?f);
        
        response_triggered'(?resp) = if (exists_{?f: failure} ( failure_triggered(?f) ^ Bernoulli(prob_response(?resp, ?f)) ) ) then true
                                else response_triggered(?resp);

        response_given' = if (exists_{?r: robot, ?resp: response, ?f: failure, ?h: human} ( give_response(?r, ?resp, ?f, ?h) ) ) then true
                                else response_given;

        task_completed' = if ( response_given | ( forall_{?resp: response} [~response_triggered(?resp)] ^ exists_{?r: robot, ?w: waypoint, ?h: human, ?b: book} [ robot_at(?r, ?w) ^ human_at(?h, ?w) ^ book_fetched(?b, ?r, ?h) ^ failure_happened ] ) ) then true
                                else task_completed;
    };

    action-preconditions {
        // action preconditions

        // A robot must be in a position to move to another
        forall_{?r: robot, ?wf: waypoint, ?wt: waypoint} [goto_waypoint(?r, ?wf, ?wt) => ( robot_at(?r, ?wf) ^ ~task_completed ) ];

        // A robot can not move to its current position
        forall_{?r: robot, ?wf: waypoint, ?wt: waypoint} [goto_waypoint(?r, ?wf, ?wt) => ( ?wf ~= ?wt ^ ~task_completed )];

        // A robot can not be in two places at the same time
        forall_{?r: robot, ?w1: waypoint, ?w2: waypoint} [ ?w1 == ?w2 | (robot_at(?r, ?w1) => ~robot_at(?r, ?w2)) ];    

        // fetch_book
        forall_{?r: robot, ?b: book, ?h: human} [fetch_book(?r, ?b, ?h) => ( exists_{?w: waypoint} [ book_at(?b, ?w) ^ robot_at(?r, ?w) ] ) ];

        // failure_happens
        forall_{?r: robot, ?b: book, ?f: failure} [failure_happens(?r, ?b, ?f) => ( exists_{?w: waypoint, ?h: human} [ book_fetched(?b, ?r, ?h) ^ book_at(?b, ?w) ^ robot_at(?r, ?w) ^ failure_triggered(?f) ^ ~failure_happened ]) ];

        // give_response
        forall_{?r: robot, ?resp: response, ?f: failure, ?h: human} [give_response(?r, ?resp, ?f, ?h) => ( exists_{?w: waypoint, ?b: book} [ human_at(?h, ?w) ^ robot_at(?r, ?w) ^ book_fetched(?b, ?r, ?h) ] ^ failure_triggered(?f) ^ failure_happened ^ response_triggered(?resp) ^ ~response_given ) ];
    };

    reward = if ( task_completed ) then 100.0 
            else -1.0;  // Reward for completing the task, penalty otherwise
}
